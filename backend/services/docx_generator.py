from docx import Document
from docx.shared import Pt, Inches, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn
import re
from typing import Dict, Any

class DocxGenerator:
    """Generate DOCX files from Markdown drafts"""
    
    @staticmethod
    def clean_markdown_for_docx(markdown_text: str) -> str:
        """Clean markdown to remove problematic elements for DOCX conversion"""
        # Remove YAML front-matter
        if markdown_text.startswith('---'):
            parts = markdown_text.split('---', 2)
            if len(parts) >= 3:
                markdown_text = parts[2].strip()
        
        # Remove tracking code
        markdown_text = markdown_text.replace("UOIONHHC", "")
        markdown_text = markdown_text.replace("<!--  -->", "")
        
        # Remove markdown links but keep the text
        # [text](url) -> text
        markdown_text = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', markdown_text)
        
        # Remove standalone URLs
        markdown_text = re.sub(r'https?://[^\s]+', '', markdown_text)
        
        # Remove HTML comments
        markdown_text = re.sub(r'<!--.*?-->', '', markdown_text, flags=re.DOTALL)
        
        # Remove empty lines with only whitespace
        lines = [line for line in markdown_text.split('\n') if line.strip()]
        
        return '\n'.join(lines)
    
    @staticmethod
    def markdown_to_docx(markdown_text: str, output_path: str) -> str:
        """Convert Markdown to DOCX with proper legal document formatting
        
        Args:
            markdown_text: Markdown content
            output_path: Path to save DOCX file
            
        Returns:
            Path to generated DOCX file
        """
        # Clean markdown first
        markdown_text = DocxGenerator.clean_markdown_for_docx(markdown_text)
        
        doc = Document()
        
        sections = doc.sections
        for section in sections:
            section.top_margin = Inches(1)
            section.bottom_margin = Inches(1)
            section.left_margin = Inches(1)
            section.right_margin = Inches(1)
        
        # Add tracking as document property (hidden from user)
        core_properties = doc.core_properties
        core_properties.comments = "UOIONHHC - Generated by Legal Template System"
        
        style = doc.styles['Normal']
        font = style.font
        font.name = 'Times New Roman'
        font.size = Pt(12)
        
        # Split into lines
        lines = markdown_text.split('\n')
        
        for line in lines:
            line_stripped = line.strip()
            
            if not line_stripped:
                # Add empty paragraph for spacing
                doc.add_paragraph()
                continue
            
            # Handle headers
            if line_stripped.startswith('# '):
                heading = doc.add_heading(line_stripped[2:], level=1)
                heading.alignment = WD_ALIGN_PARAGRAPH.LEFT
                # Set heading font
                for run in heading.runs:
                    run.font.name = 'Times New Roman'
                    run.font.size = Pt(16)
                    run.font.bold = True
                    
            elif line_stripped.startswith('## '):
                heading = doc.add_heading(line_stripped[3:], level=2)
                heading.alignment = WD_ALIGN_PARAGRAPH.LEFT
                for run in heading.runs:
                    run.font.name = 'Times New Roman'
                    run.font.size = Pt(14)
                    run.font.bold = True
                    
            elif line_stripped.startswith('### '):
                heading = doc.add_heading(line_stripped[4:], level=3)
                heading.alignment = WD_ALIGN_PARAGRAPH.LEFT
                for run in heading.runs:
                    run.font.name = 'Times New Roman'
                    run.font.size = Pt(12)
                    run.font.bold = True
            
            elif '**' in line_stripped or '*' in line_stripped:
                paragraph = doc.add_paragraph()
                paragraph.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
                
                # Parse markdown formatting
                text = line_stripped
                while text:
                    # Check for bold
                    bold_match = re.search(r'\*\*(.*?)\*\*', text)
                    if bold_match:
                        # Add text before bold
                        before = text[:bold_match.start()]
                        if before:
                            run = paragraph.add_run(before)
                            run.font.name = 'Times New Roman'
                            run.font.size = Pt(12)
                        
                        # Add bold text
                        bold_text = bold_match.group(1)
                        run = paragraph.add_run(bold_text)
                        run.font.name = 'Times New Roman'
                        run.font.size = Pt(12)
                        run.bold = True
                        
                        text = text[bold_match.end():]
                    else:
                        # No more formatting, add remaining text
                        run = paragraph.add_run(text)
                        run.font.name = 'Times New Roman'
                        run.font.size = Pt(12)
                        break
            
            # Handle lists
            elif line_stripped.startswith('- ') or line_stripped.startswith('* '):
                para = doc.add_paragraph(line_stripped[2:], style='List Bullet')
                para.paragraph_format.left_indent = Inches(0.5)
                for run in para.runs:
                    run.font.name = 'Times New Roman'
                    run.font.size = Pt(12)
                    
            elif re.match(r'^\d+\.\s', line_stripped):
                para = doc.add_paragraph(line_stripped[3:], style='List Number')
                para.paragraph_format.left_indent = Inches(0.5)
                for run in para.runs:
                    run.font.name = 'Times New Roman'
                    run.font.size = Pt(12)
            
            # Regular paragraph
            else:
                para = doc.add_paragraph(line_stripped)
                para.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
                para.paragraph_format.line_spacing = 1.5  # 1.5 line spacing
                for run in para.runs:
                    run.font.name = 'Times New Roman'
                    run.font.size = Pt(12)
        
        # Save document
        doc.save(output_path)
        return output_path

docx_generator = DocxGenerator()
